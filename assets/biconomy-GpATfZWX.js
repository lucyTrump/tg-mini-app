import{V as c,R as y,a6 as p,H as u,aw as f,o as m,a7 as l}from"./index-DAt5dF0_.js";const d=0n;async function g({account:a,serializableTransaction:n,transaction:s,gasless:e}){const o=p({address:e.relayerForwarderAddress,chain:s.chain,client:s.client}),r=await u({contract:o,method:"function getNonce(address,uint256) view returns (uint256)",params:[a.address,d]}),i=Math.floor(Date.now()/1e3)+(e.deadlineSeconds??3600),t={from:a.address,to:n.to,token:f,txGas:n.gas,tokenGasPrice:0n,batchId:d,batchNonce:r,deadline:i,data:n.data};if(!t.to)throw new Error("Cannot send a transaction without a `to` address");if(!t.txGas)throw new Error("Cannot send a transaction without a `gas` value");if(!t.data)throw new Error("Cannot send a transaction without a `data` value");const h=m([{type:"address"},{type:"address"},{type:"address"},{type:"uint256"},{type:"uint256"},{type:"uint256"},{type:"uint256"},{type:"bytes32"}],[t.from,t.to,t.token,t.txGas,t.tokenGasPrice,t.batchId,t.batchNonce,l(t.data)]),w=await a.signMessage({message:h});return[t,w]}async function k(a){var i;const[n,s]=await g(a),e=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:c({apiId:a.gasless.apiId,params:[n,s],from:n.from,to:n.to,gasLimit:n.txGas}),headers:{"x-api-key":a.gasless.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(!e.ok)throw(i=e.body)==null||i.cancel(),new Error(`Failed to send transaction: ${await e.text()}`);const o=await e.json(),r=o.txHash;if(y(r))return{transactionHash:r,chain:a.transaction.chain,client:a.transaction.client};throw new Error(`Failed to send transaction: ${c(o)}`)}export{g as prepareBiconomyTransaction,k as relayBiconomyTransaction};
